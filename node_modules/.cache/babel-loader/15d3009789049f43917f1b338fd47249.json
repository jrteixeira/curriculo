{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _possibleConstructorReturn from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Shared/projetos/github/curriculo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _PLATFORM_LOG_STRING, _ERRORS;\n\nimport { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, base64Decode, getDefaultAppConfig, deepEqual, isBrowser, isWebWorker, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar PlatformLoggerServiceImpl = /*#__PURE__*/function () {\n  function PlatformLoggerServiceImpl(container) {\n    _classCallCheck(this, PlatformLoggerServiceImpl);\n\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  _createClass(PlatformLoggerServiceImpl, [{\n    key: \"getPlatformInfoString\",\n    value: function getPlatformInfoString() {\n      var providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n      // version components.\n\n      return providers.map(function (provider) {\n        if (isVersionServiceProvider(provider)) {\n          var service = provider.getImmediate();\n          return \"\".concat(service.library, \"/\").concat(service.version);\n        } else {\n          return null;\n        }\n      }).filter(function (logString) {\n        return logString;\n      }).join(' ');\n    }\n  }]);\n\n  return PlatformLoggerServiceImpl;\n}();\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  var component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* ComponentType.VERSION */\n  ;\n}\n\nvar name$q = \"@firebase/app\";\nvar version$1 = \"0.11.4\";\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar logger = new Logger('@firebase/app');\nvar name$p = \"@firebase/app-compat\";\nvar name$o = \"@firebase/analytics-compat\";\nvar name$n = \"@firebase/analytics\";\nvar name$m = \"@firebase/app-check-compat\";\nvar name$l = \"@firebase/app-check\";\nvar name$k = \"@firebase/auth\";\nvar name$j = \"@firebase/auth-compat\";\nvar name$i = \"@firebase/database\";\nvar name$h = \"@firebase/data-connect\";\nvar name$g = \"@firebase/database-compat\";\nvar name$f = \"@firebase/functions\";\nvar name$e = \"@firebase/functions-compat\";\nvar name$d = \"@firebase/installations\";\nvar name$c = \"@firebase/installations-compat\";\nvar name$b = \"@firebase/messaging\";\nvar name$a = \"@firebase/messaging-compat\";\nvar name$9 = \"@firebase/performance\";\nvar name$8 = \"@firebase/performance-compat\";\nvar name$7 = \"@firebase/remote-config\";\nvar name$6 = \"@firebase/remote-config-compat\";\nvar name$5 = \"@firebase/storage\";\nvar name$4 = \"@firebase/storage-compat\";\nvar name$3 = \"@firebase/firestore\";\nvar name$2 = \"@firebase/vertexai\";\nvar name$1 = \"@firebase/firestore-compat\";\nvar name = \"firebase\";\nvar version = \"11.6.0\";\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The default app name\n *\n * @internal\n */\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nvar PLATFORM_LOG_STRING = (_PLATFORM_LOG_STRING = {}, _defineProperty(_PLATFORM_LOG_STRING, name$q, 'fire-core'), _defineProperty(_PLATFORM_LOG_STRING, name$p, 'fire-core-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$n, 'fire-analytics'), _defineProperty(_PLATFORM_LOG_STRING, name$o, 'fire-analytics-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$l, 'fire-app-check'), _defineProperty(_PLATFORM_LOG_STRING, name$m, 'fire-app-check-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$k, 'fire-auth'), _defineProperty(_PLATFORM_LOG_STRING, name$j, 'fire-auth-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$i, 'fire-rtdb'), _defineProperty(_PLATFORM_LOG_STRING, name$h, 'fire-data-connect'), _defineProperty(_PLATFORM_LOG_STRING, name$g, 'fire-rtdb-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$f, 'fire-fn'), _defineProperty(_PLATFORM_LOG_STRING, name$e, 'fire-fn-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$d, 'fire-iid'), _defineProperty(_PLATFORM_LOG_STRING, name$c, 'fire-iid-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$b, 'fire-fcm'), _defineProperty(_PLATFORM_LOG_STRING, name$a, 'fire-fcm-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$9, 'fire-perf'), _defineProperty(_PLATFORM_LOG_STRING, name$8, 'fire-perf-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$7, 'fire-rc'), _defineProperty(_PLATFORM_LOG_STRING, name$6, 'fire-rc-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$5, 'fire-gcs'), _defineProperty(_PLATFORM_LOG_STRING, name$4, 'fire-gcs-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$3, 'fire-fst'), _defineProperty(_PLATFORM_LOG_STRING, name$1, 'fire-fst-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$2, 'fire-vertex'), _defineProperty(_PLATFORM_LOG_STRING, 'fire-js', 'fire-js'), _defineProperty(_PLATFORM_LOG_STRING, name, 'fire-js-all'), _PLATFORM_LOG_STRING);\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\n\nvar _apps = new Map();\n/**\n * @internal\n */\n\n\nvar _serverApps = new Map();\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar _components = new Map();\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(\"Component \".concat(component.name, \" failed to register with FirebaseApp \").concat(app.name), e);\n  }\n}\n/**\n *\n * @internal\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\n\n\nfunction _registerComponent(component) {\n  var componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(\"There were multiple attempts to register component \".concat(componentName, \".\"));\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  var _iterator = _createForOfIteratorHelper(_apps.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var app = _step.value;\n\n      _addComponent(app, component);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(_serverApps.values()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var serverApp = _step2.value;\n\n      _addComponent(serverApp, component);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return true;\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\n\n\nfunction _getProvider(app, name) {\n  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\n\n\nfunction _removeServiceInstance(app, name) {\n  var instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ENTRY_NAME;\n\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\n\n\nfunction _isFirebaseApp(obj) {\n  return obj.options !== undefined;\n}\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\n\n\nfunction _isFirebaseServerApp(obj) {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n\n  return obj.settings !== undefined;\n}\n/**\n * Test only\n *\n * @internal\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"no-app\"\n/* AppError.NO_APP */\n, \"No Firebase App '{$appName}' has been created - \" + 'call initializeApp() first'), _defineProperty(_ERRORS, \"bad-app-name\"\n/* AppError.BAD_APP_NAME */\n, \"Illegal App name: '{$appName}'\"), _defineProperty(_ERRORS, \"duplicate-app\"\n/* AppError.DUPLICATE_APP */\n, \"Firebase App named '{$appName}' already exists with different options or config\"), _defineProperty(_ERRORS, \"app-deleted\"\n/* AppError.APP_DELETED */\n, \"Firebase App named '{$appName}' already deleted\"), _defineProperty(_ERRORS, \"server-app-deleted\"\n/* AppError.SERVER_APP_DELETED */\n, 'Firebase Server App has been deleted'), _defineProperty(_ERRORS, \"no-options\"\n/* AppError.NO_OPTIONS */\n, 'Need to provide options, when not being deployed to hosting via source.'), _defineProperty(_ERRORS, \"invalid-app-argument\"\n/* AppError.INVALID_APP_ARGUMENT */\n, 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'), _defineProperty(_ERRORS, \"invalid-log-argument\"\n/* AppError.INVALID_LOG_ARGUMENT */\n, 'First argument to `onLog` must be null or a function.'), _defineProperty(_ERRORS, \"idb-open\"\n/* AppError.IDB_OPEN */\n, 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-get\"\n/* AppError.IDB_GET */\n, 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-set\"\n/* AppError.IDB_WRITE */\n, 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-delete\"\n/* AppError.IDB_DELETE */\n, 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"finalization-registry-not-supported\"\n/* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n, 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.'), _defineProperty(_ERRORS, \"invalid-server-app-environment\"\n/* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n, 'FirebaseServerApp is not for use in browser environments.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar FirebaseAppImpl = /*#__PURE__*/function () {\n  function FirebaseAppImpl(options, config, container) {\n    var _this = this;\n\n    _classCallCheck(this, FirebaseAppImpl);\n\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', function () {\n      return _this;\n    }, \"PUBLIC\"\n    /* ComponentType.PUBLIC */\n    ));\n  }\n\n  _createClass(FirebaseAppImpl, [{\n    key: \"automaticDataCollectionEnabled\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._automaticDataCollectionEnabled;\n    },\n    set: function set(val) {\n      this.checkDestroyed();\n      this._automaticDataCollectionEnabled = val;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._name;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._options;\n    }\n  }, {\n    key: \"config\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._config;\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      return this._container;\n    }\n  }, {\n    key: \"isDeleted\",\n    get: function get() {\n      return this._isDeleted;\n    },\n    set: function set(val) {\n      this._isDeleted = val;\n    }\n    /**\n     * This function will throw an Error if the App has already been deleted -\n     * use before performing API actions on the App.\n     */\n\n  }, {\n    key: \"checkDestroyed\",\n    value: function checkDestroyed() {\n      if (this.isDeleted) {\n        throw ERROR_FACTORY.create(\"app-deleted\"\n        /* AppError.APP_DELETED */\n        , {\n          appName: this._name\n        });\n      }\n    }\n  }]);\n\n  return FirebaseAppImpl;\n}();\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Parse the token and check to see if the `exp` claim is in the future.\n// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in\n// the past.\n\n\nfunction validateTokenTTL(base64Token, tokenName) {\n  var secondPart = base64Decode(base64Token.split('.')[1]);\n\n  if (secondPart === null) {\n    console.error(\"FirebaseServerApp \".concat(tokenName, \" is invalid: second part could not be parsed.\"));\n    return;\n  }\n\n  var expClaim = JSON.parse(secondPart).exp;\n\n  if (expClaim === undefined) {\n    console.error(\"FirebaseServerApp \".concat(tokenName, \" is invalid: expiration claim could not be parsed\"));\n    return;\n  }\n\n  var exp = JSON.parse(secondPart).exp * 1000;\n  var now = new Date().getTime();\n  var diff = exp - now;\n\n  if (diff <= 0) {\n    console.error(\"FirebaseServerApp \".concat(tokenName, \" is invalid: the token has expired.\"));\n  }\n}\n\nvar FirebaseServerAppImpl = /*#__PURE__*/function (_FirebaseAppImpl) {\n  _inherits(FirebaseServerAppImpl, _FirebaseAppImpl);\n\n  var _super = _createSuper(FirebaseServerAppImpl);\n\n  function FirebaseServerAppImpl(options, serverConfig, name, container) {\n    var _this2;\n\n    _classCallCheck(this, FirebaseServerAppImpl);\n\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    var automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : false; // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n\n    var config = {\n      name: name,\n      automaticDataCollectionEnabled: automaticDataCollectionEnabled\n    };\n\n    if (options.apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      _this2 = _super.call(this, options, config, container);\n    } else {\n      var appImpl = options;\n      _this2 = _super.call(this, appImpl.options, config, container);\n    } // Now construct the data for the FirebaseServerAppImpl.\n\n\n    _this2._serverConfig = Object.assign({\n      automaticDataCollectionEnabled: automaticDataCollectionEnabled\n    }, serverConfig); // Ensure that the current time is within the `authIdtoken` window of validity.\n\n    if (_this2._serverConfig.authIdToken) {\n      validateTokenTTL(_this2._serverConfig.authIdToken, 'authIdToken');\n    } // Ensure that the current time is within the `appCheckToken` window of validity.\n\n\n    if (_this2._serverConfig.appCheckToken) {\n      validateTokenTTL(_this2._serverConfig.appCheckToken, 'appCheckToken');\n    }\n\n    _this2._finalizationRegistry = null;\n\n    if (typeof FinalizationRegistry !== 'undefined') {\n      _this2._finalizationRegistry = new FinalizationRegistry(function () {\n        _this2.automaticCleanup();\n      });\n    }\n\n    _this2._refCount = 0;\n\n    _this2.incRefCount(_this2._serverConfig.releaseOnDeref); // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n\n\n    _this2._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n    registerVersion(name$q, version$1, 'serverapp');\n    return _possibleConstructorReturn(_this2);\n  }\n\n  _createClass(FirebaseServerAppImpl, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return undefined;\n    }\n  }, {\n    key: \"refCount\",\n    get: function get() {\n      return this._refCount;\n    } // Increment the reference count of this server app. If an object is provided, register it\n    // with the finalization registry.\n\n  }, {\n    key: \"incRefCount\",\n    value: function incRefCount(obj) {\n      if (this.isDeleted) {\n        return;\n      }\n\n      this._refCount++;\n\n      if (obj !== undefined && this._finalizationRegistry !== null) {\n        this._finalizationRegistry.register(obj, this);\n      }\n    } // Decrement the reference count.\n\n  }, {\n    key: \"decRefCount\",\n    value: function decRefCount() {\n      if (this.isDeleted) {\n        return 0;\n      }\n\n      return --this._refCount;\n    } // Invoked by the FinalizationRegistry callback to note that this app should go through its\n    // reference counts and delete itself if no reference count remain. The coordinating logic that\n    // handles this is in deleteApp(...).\n\n  }, {\n    key: \"automaticCleanup\",\n    value: function automaticCleanup() {\n      void deleteApp(this);\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._serverConfig;\n    }\n    /**\n     * This function will throw an Error if the App has already been deleted -\n     * use before performing API actions on the App.\n     */\n\n  }, {\n    key: \"checkDestroyed\",\n    value: function checkDestroyed() {\n      if (this.isDeleted) {\n        throw ERROR_FACTORY.create(\"server-app-deleted\"\n        /* AppError.SERVER_APP_DELETED */\n        );\n      }\n    }\n  }]);\n\n  return FirebaseServerAppImpl;\n}(FirebaseAppImpl);\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The current SDK version.\n *\n * @public\n */\n\n\nvar SDK_VERSION = version;\n\nfunction initializeApp(_options) {\n  var rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    var _name = rawConfig;\n    rawConfig = {\n      name: _name\n    };\n  }\n\n  var config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  var name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* AppError.BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  options || (options = getDefaultAppConfig());\n\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\"\n    /* AppError.NO_OPTIONS */\n    );\n  }\n\n  var existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* AppError.DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  var container = new ComponentContainer(name);\n\n  var _iterator3 = _createForOfIteratorHelper(_components.values()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var component = _step3.value;\n      container.addComponent(component);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\nfunction initializeServerApp(_options, _serverAppConfig) {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(\"invalid-server-app-environment\"\n    /* AppError.INVALID_SERVER_APP_ENVIRONMENT */\n    );\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  var appOptions;\n\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  } // Build an app name based on a hash of the configuration options.\n\n\n  var nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions); // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  var hashCode = function hashCode(s) {\n    return _toConsumableArray(s).reduce(function (hash, c) {\n      return Math.imul(31, hash) + c.charCodeAt(0) | 0;\n    }, 0);\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\"finalization-registry-not-supported\"\n      /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */\n      , {});\n    }\n  }\n\n  var nameString = '' + hashCode(JSON.stringify(nameObj));\n\n  var existingApp = _serverApps.get(nameString);\n\n  if (existingApp) {\n    existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\n    return existingApp;\n  }\n\n  var container = new ComponentContainer(nameString);\n\n  var _iterator4 = _createForOfIteratorHelper(_components.values()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var component = _step4.value;\n      container.addComponent(component);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  var newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\n\n\nfunction getApp() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n  var app = _apps.get(name);\n\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* AppError.NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\n\n\nfunction deleteApp(_x) {\n  return _deleteApp.apply(this, arguments);\n}\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\n\n\nfunction _deleteApp() {\n  _deleteApp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(app) {\n    var cleanupProviders, name, firebaseServerApp;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            cleanupProviders = false;\n            name = app.name;\n\n            if (_apps.has(name)) {\n              cleanupProviders = true;\n\n              _apps.delete(name);\n            } else if (_serverApps.has(name)) {\n              firebaseServerApp = app;\n\n              if (firebaseServerApp.decRefCount() <= 0) {\n                _serverApps.delete(name);\n\n                cleanupProviders = true;\n              }\n            }\n\n            if (!cleanupProviders) {\n              _context7.next = 7;\n              break;\n            }\n\n            _context7.next = 6;\n            return Promise.all(app.container.getProviders().map(function (provider) {\n              return provider.delete();\n            }));\n\n          case 6:\n            app.isDeleted = true;\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _deleteApp.apply(this, arguments);\n}\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += \"-\".concat(variant);\n  }\n\n  var libraryMismatch = library.match(/\\s|\\//);\n  var versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    var warning = [\"Unable to register library \\\"\".concat(library, \"\\\" with version \\\"\").concat(version, \"\\\":\")];\n\n    if (libraryMismatch) {\n      warning.push(\"library name \\\"\".concat(library, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(\"version name \\\"\".concat(version, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(\"\".concat(library, \"-version\"), function () {\n    return {\n      library: library,\n      version: version\n    };\n  }, \"VERSION\"\n  /* ComponentType.VERSION */\n  ));\n}\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* AppError.INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DB_NAME = 'firebase-heartbeat-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-heartbeat-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: function upgrade(db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n\n        }\n      }\n    }).catch(function (e) {\n      throw ERROR_FACTORY.create(\"idb-open\"\n      /* AppError.IDB_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nfunction readHeartbeatsFromIndexedDB(_x2) {\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction _readHeartbeatsFromIndexedDB() {\n  _readHeartbeatsFromIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(app) {\n    var db, tx, result, idbGetError;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context8.sent;\n            tx = db.transaction(STORE_NAME);\n            _context8.next = 7;\n            return tx.objectStore(STORE_NAME).get(computeKey(app));\n\n          case 7:\n            result = _context8.sent;\n            _context8.next = 10;\n            return tx.done;\n\n          case 10:\n            return _context8.abrupt(\"return\", result);\n\n          case 13:\n            _context8.prev = 13;\n            _context8.t0 = _context8[\"catch\"](0);\n\n            if (_context8.t0 instanceof FirebaseError) {\n              logger.warn(_context8.t0.message);\n            } else {\n              idbGetError = ERROR_FACTORY.create(\"idb-get\"\n              /* AppError.IDB_GET */\n              , {\n                originalErrorMessage: _context8.t0 === null || _context8.t0 === void 0 ? void 0 : _context8.t0.message\n              });\n              logger.warn(idbGetError.message);\n            }\n\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 13]]);\n  }));\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction writeHeartbeatsToIndexedDB(_x3, _x4) {\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction _writeHeartbeatsToIndexedDB() {\n  _writeHeartbeatsToIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(app, heartbeatObject) {\n    var db, tx, objectStore, idbGetError;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return getDbPromise();\n\n          case 3:\n            db = _context9.sent;\n            tx = db.transaction(STORE_NAME, 'readwrite');\n            objectStore = tx.objectStore(STORE_NAME);\n            _context9.next = 8;\n            return objectStore.put(heartbeatObject, computeKey(app));\n\n          case 8:\n            _context9.next = 10;\n            return tx.done;\n\n          case 10:\n            _context9.next = 15;\n            break;\n\n          case 12:\n            _context9.prev = 12;\n            _context9.t0 = _context9[\"catch\"](0);\n\n            if (_context9.t0 instanceof FirebaseError) {\n              logger.warn(_context9.t0.message);\n            } else {\n              idbGetError = ERROR_FACTORY.create(\"idb-set\"\n              /* AppError.IDB_WRITE */\n              , {\n                originalErrorMessage: _context9.t0 === null || _context9.t0 === void 0 ? void 0 : _context9.t0.message\n              });\n              logger.warn(idbGetError.message);\n            }\n\n          case 15:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 12]]);\n  }));\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return \"\".concat(app.name, \"!\").concat(app.options.appId);\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar MAX_HEADER_BYTES = 1024;\nvar MAX_NUM_STORED_HEARTBEATS = 30;\n\nvar HeartbeatServiceImpl = /*#__PURE__*/function () {\n  function HeartbeatServiceImpl(container) {\n    var _this3 = this;\n\n    _classCallCheck(this, HeartbeatServiceImpl);\n\n    this.container = container;\n    /**\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n     * the header string.\n     * Stores one record per date. This will be consolidated into the standard\n     * format of one record per user agent string before being sent as a header.\n     * Populated from indexedDB when the controller is instantiated and should\n     * be kept in sync with indexedDB.\n     * Leave public for easier testing.\n     */\n\n    this._heartbeatsCache = null;\n    var app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(function (result) {\n      _this3._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n\n\n  _createClass(HeartbeatServiceImpl, [{\n    key: \"triggerHeartbeat\",\n    value: function () {\n      var _triggerHeartbeat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, _b, platformLogger, agent, date, earliestHeartbeatIdx;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n                // service, not the browser user agent.\n\n                agent = platformLogger.getPlatformInfoString();\n                date = getUTCDateString();\n\n                if (!(((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 7;\n                return this._heartbeatsCachePromise;\n\n              case 7:\n                this._heartbeatsCache = _context.sent;\n\n                if (!(((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 10:\n                if (!(this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {\n                  return singleDateHeartbeat.date === date;\n                }))) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 14:\n                // There is no entry for this date. Create one.\n                this._heartbeatsCache.heartbeats.push({\n                  date: date,\n                  agent: agent\n                }); // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n                // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n\n\n                if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {\n                  earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);\n\n                  this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n                }\n\n              case 16:\n                return _context.abrupt(\"return\", this._storage.overwrite(this._heartbeatsCache));\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](0);\n                logger.warn(_context.t0);\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n\n      function triggerHeartbeat() {\n        return _triggerHeartbeat.apply(this, arguments);\n      }\n\n      return triggerHeartbeat;\n    }()\n    /**\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n     * It also clears all heartbeats from memory as well as in IndexedDB.\n     *\n     * NOTE: Consuming product SDKs should not send the header if this method\n     * returns an empty string.\n     */\n\n  }, {\n    key: \"getHeartbeatsHeader\",\n    value: function () {\n      var _getHeartbeatsHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _a, date, _extractHeartbeatsFor, heartbeatsToSend, unsentEntries, headerString;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n\n                if (!(this._heartbeatsCache === null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this._heartbeatsCachePromise;\n\n              case 4:\n                if (!(((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", '');\n\n              case 6:\n                date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n\n                _extractHeartbeatsFor = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _extractHeartbeatsFor.heartbeatsToSend, unsentEntries = _extractHeartbeatsFor.unsentEntries;\n                headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n                  version: 2,\n                  heartbeats: heartbeatsToSend\n                })); // Store last sent date to prevent another being logged/sent for the same day.\n\n                this._heartbeatsCache.lastSentHeartbeatDate = date;\n\n                if (!(unsentEntries.length > 0)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                // Store any unsent entries if they exist.\n                this._heartbeatsCache.heartbeats = unsentEntries; // This seems more likely than emptying the array (below) to lead to some odd state\n                // since the cache isn't empty and this will be called again on the next request,\n                // and is probably safest if we await it.\n\n                _context2.next = 14;\n                return this._storage.overwrite(this._heartbeatsCache);\n\n              case 14:\n                _context2.next = 18;\n                break;\n\n              case 16:\n                this._heartbeatsCache.heartbeats = []; // Do not wait for this, to reduce latency.\n\n                void this._storage.overwrite(this._heartbeatsCache);\n\n              case 18:\n                return _context2.abrupt(\"return\", headerString);\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](0);\n                logger.warn(_context2.t0);\n                return _context2.abrupt(\"return\", '');\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 21]]);\n      }));\n\n      function getHeartbeatsHeader() {\n        return _getHeartbeatsHeader.apply(this, arguments);\n      }\n\n      return getHeartbeatsHeader;\n    }()\n  }]);\n\n  return HeartbeatServiceImpl;\n}();\n\nfunction getUTCDateString() {\n  var today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache) {\n  var maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  var heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  var unsentEntries = heartbeatsCache.slice();\n\n  var _iterator5 = _createForOfIteratorHelper(heartbeatsCache),\n      _step5;\n\n  try {\n    var _loop = function _loop() {\n      var singleDateHeartbeat = _step5.value;\n      // Look for an existing entry with the same user agent.\n      var heartbeatEntry = heartbeatsToSend.find(function (hb) {\n        return hb.agent === singleDateHeartbeat.agent;\n      });\n\n      if (!heartbeatEntry) {\n        // If no entry for this user agent exists, create one.\n        heartbeatsToSend.push({\n          agent: singleDateHeartbeat.agent,\n          dates: [singleDateHeartbeat.date]\n        });\n\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          // If the header would exceed max size, remove the added heartbeat\n          // entry and stop adding to the header.\n          heartbeatsToSend.pop();\n          return \"break\";\n        }\n      } else {\n        heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n        // and stop adding to the header.\n\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          heartbeatEntry.dates.pop();\n          return \"break\";\n        }\n      } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n      // quota and the loop breaks early.)\n\n\n      unsentEntries = unsentEntries.slice(1);\n    };\n\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"break\") break;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return {\n    heartbeatsToSend: heartbeatsToSend,\n    unsentEntries: unsentEntries\n  };\n}\n\nvar HeartbeatStorageImpl = /*#__PURE__*/function () {\n  function HeartbeatStorageImpl(app) {\n    _classCallCheck(this, HeartbeatStorageImpl);\n\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  _createClass(HeartbeatStorageImpl, [{\n    key: \"runIndexedDBEnvironmentCheck\",\n    value: function () {\n      var _runIndexedDBEnvironmentCheck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (isIndexedDBAvailable()) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", false);\n\n              case 4:\n                return _context3.abrupt(\"return\", validateIndexedDBOpenable().then(function () {\n                  return true;\n                }).catch(function () {\n                  return false;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function runIndexedDBEnvironmentCheck() {\n        return _runIndexedDBEnvironmentCheck.apply(this, arguments);\n      }\n\n      return runIndexedDBEnvironmentCheck;\n    }()\n    /**\n     * Read all heartbeats.\n     */\n\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var canUseIndexedDB, idbHeartbeatObject;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context4.sent;\n\n                if (canUseIndexedDB) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  heartbeats: []\n                });\n\n              case 7:\n                _context4.next = 9;\n                return readHeartbeatsFromIndexedDB(this.app);\n\n              case 9:\n                idbHeartbeatObject = _context4.sent;\n\n                if (!(idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", idbHeartbeatObject);\n\n              case 14:\n                return _context4.abrupt(\"return\", {\n                  heartbeats: []\n                });\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }() // overwrite the storage with the provided heartbeats\n\n  }, {\n    key: \"overwrite\",\n    value: function () {\n      var _overwrite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context5.sent;\n\n                if (canUseIndexedDB) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 7:\n                _context5.next = 9;\n                return this.read();\n\n              case 9:\n                existingHeartbeatsObject = _context5.sent;\n                return _context5.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: heartbeatsObject.heartbeats\n                }));\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function overwrite(_x5) {\n        return _overwrite.apply(this, arguments);\n      }\n\n      return overwrite;\n    }() // add heartbeats\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._canUseIndexedDBPromise;\n\n              case 2:\n                canUseIndexedDB = _context6.sent;\n\n                if (canUseIndexedDB) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 7:\n                _context6.next = 9;\n                return this.read();\n\n              case 9:\n                existingHeartbeatsObject = _context6.sent;\n                return _context6.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: [].concat(_toConsumableArray(existingHeartbeatsObject.heartbeats), _toConsumableArray(heartbeatsObject.heartbeats))\n                }));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function add(_x6) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }]);\n\n  return HeartbeatStorageImpl;\n}();\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\n\n\nfunction getEarliestHeartbeatIdx(heartbeats) {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  var earliestHeartbeatIdx = 0;\n  var earliestHeartbeatDate = heartbeats[0].date;\n\n  for (var i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', function (container) {\n    return new PlatformLoggerServiceImpl(container);\n  }, \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', function (container) {\n    return new HeartbeatServiceImpl(container);\n  }, \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$q, version$1, variant); // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n\n  registerVersion(name$q, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"sources":["../../src/platformLoggerService.ts","../../src/logger.ts","../../src/constants.ts","../../src/internal.ts","../../src/errors.ts","../../src/firebaseApp.ts","../../src/firebaseServerApp.ts","../../src/api.ts","../../src/indexeddb.ts","../../src/heartbeatService.ts","../../src/registerCoreComponents.ts","../../src/index.ts"],"names":["appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","dataconnectName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","vertexName","packageName","version","setLogLevelImpl","name"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as dataconnectName } from '../../../packages/data-connect/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [dataconnectName]: 'fire-data-connect',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp | null | undefined\n): obj is FirebaseServerApp {\n  if (obj === null || obj === undefined) {\n    return false;\n  }\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\nimport { base64Decode } from '@firebase/util';\n\n// Parse the token and check to see if the `exp` claim is in the future.\n// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in\n// the past.\nfunction validateTokenTTL(base64Token: string, tokenName: string): void {\n  const secondPart = base64Decode(base64Token.split('.')[1]);\n  if (secondPart === null) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`\n    );\n    return;\n  }\n  const expClaim = JSON.parse(secondPart).exp;\n  if (expClaim === undefined) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`\n    );\n    return;\n  }\n  const exp = JSON.parse(secondPart).exp * 1000;\n  const now = new Date().getTime();\n  const diff = exp - now;\n  if (diff <= 0) {\n    console.error(\n      `FirebaseServerApp ${tokenName} is invalid: the token has expired.`\n    );\n  }\n}\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object> | null;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : false;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    // Ensure that the current time is within the `authIdtoken` window of validity.\n    if (this._serverConfig.authIdToken) {\n      validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');\n    }\n\n    // Ensure that the current time is within the `appCheckToken` window of validity.\n    if (this._serverConfig.appCheckToken) {\n      validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');\n    }\n\n    this._finalizationRegistry = null;\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this._finalizationRegistry = new FinalizationRegistry(() => {\n        this.automaticCleanup();\n      });\n    }\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined && this._finalizationRegistry !== null) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\nimport { logger } from './logger';\n\nconst MAX_HEADER_BYTES = 1024;\nexport const MAX_NUM_STORED_HEARTBEATS = 30;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    try {\n      const platformLogger = this.container\n        .getProvider('platform-logger')\n        .getImmediate();\n\n      // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n      const agent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n      if (this._heartbeatsCache?.heartbeats == null) {\n        this._heartbeatsCache = await this._heartbeatsCachePromise;\n        // If we failed to construct a heartbeats cache, then return immediately.\n        if (this._heartbeatsCache?.heartbeats == null) {\n          return;\n        }\n      }\n      // Do not store a heartbeat if one is already stored for this day\n      // or if a header has already been sent today.\n      if (\n        this._heartbeatsCache.lastSentHeartbeatDate === date ||\n        this._heartbeatsCache.heartbeats.some(\n          singleDateHeartbeat => singleDateHeartbeat.date === date\n        )\n      ) {\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        this._heartbeatsCache.heartbeats.push({ date, agent });\n\n        // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.\n        // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.\n        if (\n          this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS\n        ) {\n          const earliestHeartbeatIdx = getEarliestHeartbeatIdx(\n            this._heartbeatsCache.heartbeats\n          );\n          this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);\n        }\n      }\n\n      return this._storage.overwrite(this._heartbeatsCache);\n    } catch (e) {\n      logger.warn(e);\n    }\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    try {\n      if (this._heartbeatsCache === null) {\n        await this._heartbeatsCachePromise;\n      }\n      // If it's still null or the array is empty, there is no data to send.\n      if (\n        this._heartbeatsCache?.heartbeats == null ||\n        this._heartbeatsCache.heartbeats.length === 0\n      ) {\n        return '';\n      }\n      const date = getUTCDateString();\n      // Extract as many heartbeats from the cache as will fit under the size limit.\n      const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n        this._heartbeatsCache.heartbeats\n      );\n      const headerString = base64urlEncodeWithoutPadding(\n        JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n      );\n      // Store last sent date to prevent another being logged/sent for the same day.\n      this._heartbeatsCache.lastSentHeartbeatDate = date;\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        this._heartbeatsCache.heartbeats = unsentEntries;\n        // This seems more likely than emptying the array (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n        await this._storage.overwrite(this._heartbeatsCache);\n      } else {\n        this._heartbeatsCache.heartbeats = [];\n        // Do not wait for this, to reduce latency.\n        void this._storage.overwrite(this._heartbeatsCache);\n      }\n      return headerString;\n    } catch (e) {\n      logger.warn(e);\n      return '';\n    }\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n\n/**\n * Returns the index of the heartbeat with the earliest date.\n * If the heartbeats array is empty, -1 is returned.\n */\nexport function getEarliestHeartbeatIdx(\n  heartbeats: SingleDateHeartbeat[]\n): number {\n  if (heartbeats.length === 0) {\n    return -1;\n  }\n\n  let earliestHeartbeatIdx = 0;\n  let earliestHeartbeatDate = heartbeats[0].date;\n\n  for (let i = 1; i < heartbeats.length; i++) {\n    if (heartbeats[i].date < earliestHeartbeatDate) {\n      earliestHeartbeatDate = heartbeats[i].date;\n      earliestHeartbeatIdx = i;\n    }\n  }\n\n  return earliestHeartbeatIdx;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}